(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('apollo-link'), require('graphql/language/printer')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'apollo-link', 'graphql/language/printer'], factory) :
	(factory((global.apollo = global.apollo || {}, global.apollo.link = global.apollo.link || {}, global.apollo.link.http = {}),global.ng.core,global.ng.common.http,global.httpLink,global.printer));
}(this, (function (exports,core,http,apolloLink,printer) { 'use strict';

var mergeHeaders = function (source, destination) {
    if (source && destination) {
        var merged = destination
            .keys()
            .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
        return merged;
    }
    return destination || source;
};
function prioritize(first, second, init) {
    if (typeof first !== 'undefined') {
        init = first;
    }
    else if (typeof second !== 'undefined') {
        init = second;
    }
    return init;
}

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
// XXX find a better name for it
var HttpLinkHandler = /** @class */ (function (_super) {
    __extends(HttpLinkHandler, _super);
    function HttpLinkHandler(httpClient, options) {
        var _this = _super.call(this) || this;
        _this.httpClient = httpClient;
        _this.options = options;
        _this.requester = function (operation) {
            return new apolloLink.Observable(function (observer) {
                var context = operation.getContext();
                // decides which value to pick, Context, Options or to just use the default
                var pick = function (key, init) {
                    return prioritize(context[key], _this.options[key], init);
                };
                var includeQuery = pick('includeQuery', true);
                var includeExtensions = pick('includeExtensions', false);
                var method = pick('method', 'POST');
                var url = pick('uri', 'graphql');
                var withCredentials = pick('withCredentials');
                var req = {
                    method: method,
                    url: url,
                    body: {
                        operationName: operation.operationName,
                        variables: operation.variables,
                    },
                    options: {
                        withCredentials: withCredentials,
                        headers: _this.options.headers,
                    },
                };
                if (includeExtensions) {
                    req.body.extensions = operation.extensions;
                }
                if (includeQuery) {
                    req.body.query = printer.print(operation.query);
                }
                if (context.headers) {
                    req.options.headers = mergeHeaders(req.options.headers, context.headers);
                }
                var sub = _this.fetch(req).subscribe({
                    next: function (result) { return observer.next(result.body); },
                    error: function (err) { return observer.error(err); },
                    complete: function () { return observer.complete(); },
                });
                return function () {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                };
            });
        };
        return _this;
    }
    HttpLinkHandler.prototype.request = function (op) {
        return this.requester(op);
    };
    // XXX make it as a separate package so it can be used in BatchLink
    HttpLinkHandler.prototype.fetch = function (req) {
        var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
        var shouldStringify = function (param) {
            return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
        };
        // `body` for some, `params` for others
        var bodyOrParams = {};
        if (shouldUseBody) {
            bodyOrParams = {
                body: req.body,
            };
        }
        else {
            var params = Object.keys(req.body).reduce(function (httpParams, param) {
                var val = req.body[param];
                if (shouldStringify(param.toLowerCase())) {
                    val = JSON.stringify(val);
                }
                return httpParams.set(param, val);
            }, new http.HttpParams());
            bodyOrParams = { params: params };
        }
        // create a request
        return this.httpClient.request(req.method, req.url, __assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
    };
    return HttpLinkHandler;
}(apolloLink.ApolloLink));
var HttpLink = /** @class */ (function () {
    function HttpLink(httpClient) {
        this.httpClient = httpClient;
    }
    HttpLink.prototype.create = function (options) {
        return new HttpLinkHandler(this.httpClient, options);
    };
    HttpLink.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    HttpLink.ctorParameters = function () { return [
        { type: http.HttpClient, },
    ]; };
    return HttpLink;
}());

var PROVIDERS = [HttpLink];
var HttpLinkModule = /** @class */ (function () {
    function HttpLinkModule() {
    }
    HttpLinkModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: PROVIDERS,
                },] },
    ];
    /** @nocollapse */
    HttpLinkModule.ctorParameters = function () { return []; };
    return HttpLinkModule;
}());

exports.HttpLink = HttpLink;
exports.HttpLinkHandler = HttpLinkHandler;
exports.HttpLinkModule = HttpLinkModule;
exports.PROVIDERS = PROVIDERS;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
